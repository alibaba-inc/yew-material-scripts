interface Window {
    Jss: object;
}

interface YewMaterial {
    start: Function;
}

interface YewMdcFeatures {
    impl: Function;
}

type YewImport = [YewMaterial, YewMdcFeatures];

declare var window: Window & typeof globalThis;
declare var start: (yew_import: () => YewImport) => void;
declare var match_fn: string;
declare var initialize: (wasmPackPlugin: any, config: any, env: String) => any;

function match_ident(ident: String) {
    switch (ident) {
        case "ripple":
            return "ripple";
            break;
        case "button":
            return "button";
            break;
        case "checkbox":
            return "checkbox";
            break;
        case "progress":
            return "circular-progress::linear-progress::circular-progress-four-color";
            break;
        case "dialog":
            return "dialog";
            break;
        case "fab":
            return "fab";
            break;
        case "formfield":
            return "formfield";
            break;
        case "icon_button":
            return "icon-button::icon-button-toggle";
            break;
        case "icon":
            return "icon";
            break;
        case "list":
            return "list::list/mwc-list-item::list/mwc-radio-list-item::list/mwc-check-list-item";
            break;
        case "menu":
            return "menu";
            break;
        case "radio":
            return "radio";
            break;
        case "select":
            return "select";
            break;
        case "slider":
            return "slider";
            break;
        case "snackbar":
            return "snackbar";
            break;
        case "switch":
            return "switch";
            break;
        case "tab":
            return "tab-bar::tab";
            break;
        case "textarea":
            return "textarea";
            break;
        case "textfield":
            return "textfield";
            break;
        case "appbar":
            return "top-app-bar::top-app-bar-fixed";
            break;
        default:
            return "";
    }
};

var start = (yew_import: () => YewImport) => {
    let jss = require("jss").default;
    let preset = require("jss-preset-default").default;

    jss.setup(preset());
    window["Jss"] = jss;

    (async () => {
        let imports = await yew_import();
        let { start } = imports[0];
        let { impl } = imports[1];
        window["Imports"] = impl;
        start();
    })();
};

var initialize = (wasmPackPlugin: any, config: any, env: String) => {
    let wasmExtensionRegExp = /\.wasm$/;
    let webassemblyModuleFilename = "yew-material-[hash].wasm";
    let ext = config.resolve.extensions;

    //Relative imports outside of src/ are supported.
    config.resolve.plugins.splice(1, 1);

    config.resolve.extensions = ext.concat([".wasm"]);
    config.output.webassemblyModuleFilename = webassemblyModuleFilename;
    config.plugins.push(
        new wasmPackPlugin({
            crateDirectory: ".",
            extraArgs: "--no-typescript",
            forceMode: env,
        })
    );

    config.module.rules.forEach((rule) => {
        (rule.oneOf || []).forEach((oneOf) => {
            if (oneOf.loader && oneOf.loader.indexOf("file-loader") >= 0) {
                oneOf.exclude.push(wasmExtensionRegExp);
            }
        });
    });

    config.optimization.splitChunks.minSize = 500000;
    config.optimization.splitChunks.maxSize = 1000000;

    let toml = require('toml');
    let fs = require('fs');
    let cargo = fs.readFileSync('./Cargo.toml', { encoding: 'utf8' });
    let data = toml.parse(cargo);
    let features = data.dependencies["yew-material"].features;

    // config.plugins.push(new webpack.DefinePlugin({
    //     Features: JSON.stringify(features),
    // }));

    let config_features = fs.createWriteStream('config-features.js', {
        flags: 'w',
        mode: 0o666,
        autoClose: true,
        highWaterMark: 3,
        encoding: 'utf8'
    });

    let ident_items = features?.map(ident => {
        let path = match_ident(ident);
        let req = path.split("::");
        let reqs = req.map(r => `require("@material/mwc-${r}");`).join("\n                    ");
        if (path !== "") {
            return `
                case "${ident}":
                    ${reqs}
                    break;
            `;
        } else {
            return "";
        }
    }).join("");

    if (ident_items) {
        config_features.write(`
            /*This is the import file of MDC-Material basic components automatically generated by Cargo.toml, please do not delete!*/
            /*这是依据Cargo.toml自动生成的MDC-Material基础组件导入文件，请勿删除！*/
            export function impl(ident) {
                switch (ident) {
                    ${ident_items}
                }
            };
        `);
    } else {
        config_features.write(`
            export function impl(ident) {
                console.error(\`yew-material-scripts: yew-material features item [\"\${ident}\"] not found\`);
            };
        `);
    }

    return config;
};

module.exports = {
    start,
    initialize
};
